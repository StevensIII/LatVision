variables:
  UV_VERSION: "0.5"
  PYTHON_VERSION: "3.11"
  BASE_LAYER: bookworm-slim
  UV_LINK_MODE: copy
  IMAGE_NAME: stevensbohorquez/latvision-app
  IMAGE_TAG: latvision-application-v1.0

stages:
  - test
  - build
  - deploy

run_test:
  stage: test
  image: ghcr.io/astral-sh/uv:$UV_VERSION-python$PYTHON_VERSION-$BASE_LAYER
  before_script:
    - apt-get update && apt-get install -y make libgl1 libglib2.0-0
  script:
    - make test-all
  cache:
    key:
      files:
        - requirements.txt
    paths:
      - venv/

build_image:
  stage: build
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  image: docker:28.5.1-cli
  services:
    - docker:28.5.1-dind
  before_script:
    - echo "$REGISTRY_PASSWORD" | docker login -u "$REGISTRY_USER" --password-stdin
    - docker login -u $REGISTRY_USER -p $REGISTRY_PASSWORD
  script:
    - docker build -t $IMAGE_NAME:$IMAGE_TAG -f docker/Dockerfile .
    - docker push $IMAGE_NAME:$IMAGE_TAG

deploy:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client bash
    - mkdir -p /root/.ssh
    - cp "$SSH_KEY" /root/.ssh/id_rsa
    - chmod 600 /root/.ssh/id_rsa
    - ssh-keyscan -H 24.199.119.98 >> /root/.ssh/known_hosts
  script:
    - echo "Conectando al servidor remoto y desplegando..."
    - |
      ssh -i /root/.ssh/id_rsa -o StrictHostKeyChecking=yes root@24.199.119.98 "
        set -e;
        CONTAINER_NAME='latvision-app';
        echo '$REGISTRY_PASSWORD' | docker login -u '$REGISTRY_USER' --password-stdin;
        docker pull 'stevensbohorquez/latvision-app:latvision-application-v1.0';
        if [ \$(docker ps -aq -f name=\$CONTAINER_NAME) ]; then
          docker stop \$CONTAINER_NAME || true;
          docker rm \$CONTAINER_NAME || true;
        fi;
        docker run -d -p 8501:8501 --name \$CONTAINER_NAME stevensbohorquez/latvision-app:latvision-application-v1.0;
        docker image prune -f;
      "
  only:
    - main
